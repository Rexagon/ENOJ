#version 330

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 tex_coords;
layout (location = 2) in vec3 normal;
layout (location = 3) in vec3 tangent;
layout (location = 4) in ivec4 bone_indices;
layout (location = 5) in vec4 bone_weights;

uniform mat4 camera_matrix;
uniform mat4 model_matrix;
uniform mat4 bone_matrices[64];

out vec2 v_tex_coords;
out vec3 v_normal;
out vec3 v_tangent;
out vec3 v_position;

out vec3 v_bone_weights; // for debug

void main()
{
    mat4 transform_matrix;
    if (bone_weights != vec4(0)) {
        transform_matrix = bone_weights.x * bone_matrices[bone_indices.x];
        transform_matrix += bone_weights.y * bone_matrices[bone_indices.y];
        transform_matrix += bone_weights.z * bone_matrices[bone_indices.z];
        transform_matrix += bone_weights.w * bone_matrices[bone_indices.w];
    } else {
        transform_matrix = mat4(1);
    }
    
    mat4 global_matrix = transform_matrix * model_matrix;
    
	gl_Position = camera_matrix * global_matrix * vec4(position, 1.0);
	v_tex_coords = tex_coords;
	v_normal = (transpose(inverse(global_matrix)) * vec4(normal, 1.0)).xyz;
	v_tangent = (global_matrix * vec4(tangent, 1.0)).xyz;
	v_position = (global_matrix * vec4(position, 1.0)).xyz;
	v_bone_weights = bone_weights.xyz;
}